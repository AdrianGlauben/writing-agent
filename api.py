import openai


def get_completion(prompt, system_message, api_key, n=1, model="gpt-3.5-turbo"):
    """
    Get a chat completion from OpenAI's API.

    Args:
        prompt (str): The user's prompt to generate a response for.
        system_message (str): The system's message to provide context for the prompt.
        api_key (str): The API key to use for authentication with OpenAI's API.
        n (int, optional): The number of responses to generate. Defaults to 1.
        model (str, optional): The name of the OpenAI model to use. Defaults to "gpt-3.5-turbo".
        max_tokens (int, optional): The maximum number of tokens to generate in the response. Defaults to 2500.

    Returns:
        List[str]: A list of n chat completions generated by the OpenAI API.
    """
    openai.api_key = api_key

    response = openai.ChatCompletion.create(
        model=model,
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": prompt},
        ],
        n=n,
    )

    return [choice.message.content for choice in response.choices]


def get_chat_completion(
    messages, api_key, n=1, model="gpt-3.5-turbo", max_tokens=10000
):
    openai.api_key = api_key

    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        n=n,
        max_tokens=max_tokens,
    )

    return response.choices[0].message.content
